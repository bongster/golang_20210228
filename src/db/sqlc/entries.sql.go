// Code generated by sqlc. DO NOT EDIT.
// source: entries.sql

package db

import (
	"context"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (
    user_id,
    amount,
    currency
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, amount, currency, created_at, updated_at
`

type CreateEntryParams struct {
	UserID   int32  `json:"user_id"`
	Amount   int64  `json:"amount"`
	Currency string `json:"currency"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry, arg.UserID, arg.Amount, arg.Currency)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCountEntry = `-- name: GetCountEntry :one
SELECT count(id) FROM entries
WHERE ($1::integer = 0 OR user_id = $1)
`

func (q *Queries) GetCountEntry(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCountEntry, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getEntry = `-- name: GetEntry :one
SELECT id, user_id, amount, currency, created_at, updated_at FROM entries
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context, id int32) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT id, user_id, amount, currency, created_at, updated_at FROM entries
WHERE
    ($1::integer = 0 OR user_id = $1)
ORDER BY id
`

func (q *Queries) ListEntries(ctx context.Context, userID int32) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntries, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Currency,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
