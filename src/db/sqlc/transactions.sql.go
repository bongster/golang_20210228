// Code generated by sqlc. DO NOT EDIT.
// source: transactions.sql

package db

import (
	"context"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    user_id,
    transaction_type,
    status,
    amount
) VALUES (
    $1, $2, $3, $4
) RETURNING id, user_id, transaction_type, status, amount, created_at, updated_at
`

type CreateTransactionParams struct {
	UserID          int32  `json:"user_id"`
	TransactionType string `json:"transaction_type"`
	Status          string `json:"status"`
	Amount          int64  `json:"amount"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.UserID,
		arg.TransactionType,
		arg.Status,
		arg.Amount,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TransactionType,
		&i.Status,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions
WHERE id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, id)
	return err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, user_id, transaction_type, status, amount, created_at, updated_at FROM transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id int32) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TransactionType,
		&i.Status,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransactionByUserId = `-- name: GetTransactionByUserId :one
SELECT id, user_id, transaction_type, status, amount, created_at, updated_at FROM transactions
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetTransactionByUserId(ctx context.Context, userID int32) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionByUserId, userID)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TransactionType,
		&i.Status,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, user_id, transaction_type, status, amount, created_at, updated_at FROM transactions
ORDER BY id
`

func (q *Queries) ListTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TransactionType,
			&i.Status,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransactionStatus = `-- name: UpdateTransactionStatus :exec
UPDATE transactions SET status = $2, updated_at = now()
WHERE id = $1
`

type UpdateTransactionStatusParams struct {
	ID     int32  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateTransactionStatus(ctx context.Context, arg UpdateTransactionStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTransactionStatus, arg.ID, arg.Status)
	return err
}
